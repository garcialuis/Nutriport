// Code generated by go-swagger; DO NOT EDIT.

package food_item

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new food item API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for food item API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateFoodItem(params *CreateFoodItemParams) (*CreateFoodItemCreated, error)

	GetAllFoodItems(params *GetAllFoodItemsParams) (*GetAllFoodItemsOK, error)

	GetFoodItemByName(params *GetFoodItemByNameParams) (*GetFoodItemByNameOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateFoodItem create food item API
*/
func (a *Client) CreateFoodItem(params *CreateFoodItemParams) (*CreateFoodItemCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFoodItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateFoodItem",
		Method:             "POST",
		PathPattern:        "/fooditem",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFoodItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFoodItemCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateFoodItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllFoodItems get all food items API
*/
func (a *Client) GetAllFoodItems(params *GetAllFoodItemsParams) (*GetAllFoodItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllFoodItemsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAllFoodItems",
		Method:             "GET",
		PathPattern:        "/fooditem",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllFoodItemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllFoodItemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllFoodItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFoodItemByName get food item by name API
*/
func (a *Client) GetFoodItemByName(params *GetFoodItemByNameParams) (*GetFoodItemByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFoodItemByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFoodItemByName",
		Method:             "GET",
		PathPattern:        "/fooditem/{foodName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFoodItemByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFoodItemByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetFoodItemByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
