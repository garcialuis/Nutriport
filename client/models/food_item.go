// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FoodItem FoodItem is the model that contains all information about an item
// It includes the food variety, carb level, and food group information for a given item
//
// swagger:model FoodItem
type FoodItem struct {

	// CarbLevelID is the reference to the carb level in the database table
	CarbLevelID uint8 `json:"CarbLevelID,omitempty"`

	// CupQuantity represents the amount that is allowed to intake in Cup(s)
	// Required: true
	CupQuantity *float32 `json:"cupQuantity"`

	// FoodGroupID is the reference to the group from the food group db table
	// Minimum: 1
	FoodGroupID uint8 `json:"FoodGroupID,omitempty"`

	// FoodVarietyID is a reference to the FoodVariety record in the db
	// Minimum: 1
	FoodVarietyID uint16 `json:"FoodVarietyID,omitempty"`

	// GramWeight represents the allowed weight to intake - in grams
	// Required: true
	GramWeight *float32 `json:"GMWt"`

	// ID is the database assigned id to the food item record
	// Minimum: 1
	ID uint32 `json:"id,omitempty"`

	// Name is the name of the food item
	// Required: true
	Name *string `json:"name"`

	// OnceWeight represents the allowed weight to intake - in ounces
	// Required: true
	OnceWeight *float32 `json:"OzWt"`

	// carb level
	// Required: true
	CarbLevel *CarbLevel `json:"carbLevel"`

	// food group
	FoodGroup *FoodGroup `json:"foodGroup,omitempty"`

	// variety
	Variety *FoodVariety `json:"variety,omitempty"`
}

// Validate validates this food item
func (m *FoodItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCupQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFoodGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFoodVarietyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGramWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnceWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCarbLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFoodGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariety(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FoodItem) validateCupQuantity(formats strfmt.Registry) error {

	if err := validate.Required("cupQuantity", "body", m.CupQuantity); err != nil {
		return err
	}

	return nil
}

func (m *FoodItem) validateFoodGroupID(formats strfmt.Registry) error {

	if swag.IsZero(m.FoodGroupID) { // not required
		return nil
	}

	if err := validate.MinimumInt("FoodGroupID", "body", int64(m.FoodGroupID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *FoodItem) validateFoodVarietyID(formats strfmt.Registry) error {

	if swag.IsZero(m.FoodVarietyID) { // not required
		return nil
	}

	if err := validate.MinimumInt("FoodVarietyID", "body", int64(m.FoodVarietyID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *FoodItem) validateGramWeight(formats strfmt.Registry) error {

	if err := validate.Required("GMWt", "body", m.GramWeight); err != nil {
		return err
	}

	return nil
}

func (m *FoodItem) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinimumInt("id", "body", int64(m.ID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *FoodItem) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *FoodItem) validateOnceWeight(formats strfmt.Registry) error {

	if err := validate.Required("OzWt", "body", m.OnceWeight); err != nil {
		return err
	}

	return nil
}

func (m *FoodItem) validateCarbLevel(formats strfmt.Registry) error {

	if err := validate.Required("carbLevel", "body", m.CarbLevel); err != nil {
		return err
	}

	if m.CarbLevel != nil {
		if err := m.CarbLevel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carbLevel")
			}
			return err
		}
	}

	return nil
}

func (m *FoodItem) validateFoodGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.FoodGroup) { // not required
		return nil
	}

	if m.FoodGroup != nil {
		if err := m.FoodGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("foodGroup")
			}
			return err
		}
	}

	return nil
}

func (m *FoodItem) validateVariety(formats strfmt.Registry) error {

	if swag.IsZero(m.Variety) { // not required
		return nil
	}

	if m.Variety != nil {
		if err := m.Variety.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("variety")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FoodItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FoodItem) UnmarshalBinary(b []byte) error {
	var res FoodItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
