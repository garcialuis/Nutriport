// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FoodVariety FoodVariety represents the variety for a food item
// For example, a variety for a brocolli can be coocked from fresh or frozen
//
// swagger:model FoodVariety
type FoodVariety struct {

	// FoodVarietyName is a description of the variety
	// For example, a variety can be coocked from fresh or frozen
	FoodVarietyName string `json:"variety,omitempty"`

	// ID is the database id assigned to the food group
	// This id is used to referece the variety from the food items table
	// Required: true
	// Minimum: 1
	ID *uint16 `json:"ID"`
}

// Validate validates this food variety
func (m *FoodVariety) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FoodVariety) validateID(formats strfmt.Registry) error {

	if err := validate.Required("ID", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinimumInt("ID", "body", int64(*m.ID), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FoodVariety) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FoodVariety) UnmarshalBinary(b []byte) error {
	var res FoodVariety
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
