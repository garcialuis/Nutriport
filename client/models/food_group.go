// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FoodGroup FoodGroup identifies the food group that a food item belongs to
// Food groups can be: fruit, dairy, protein, etc...
//
// swagger:model FoodGroup
type FoodGroup struct {

	// FoodGroupName is a string describing the food group
	FoodGroupName string `json:"foodGroupName,omitempty"`

	// ID is the database id that is given to the food group record
	// This value is required when inputing a new food item.
	// Required: true
	// Minimum: 1
	ID *uint8 `json:"id"`
}

// Validate validates this food group
func (m *FoodGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FoodGroup) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinimumInt("id", "body", int64(*m.ID), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FoodGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FoodGroup) UnmarshalBinary(b []byte) error {
	var res FoodGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
